searchState.loadedDescShard("config", 0, "Config organizes hierarchical or layered configurations …\nDescribes a generic <em>source</em> of configuration properties …\nA prioritized configuration repository. It maintains a set …\nRepresents all possible errors that can occur when working …\nA configuration source backed up by a file.\nFile formats provided by the library.\nConfiguration could not be parsed from file.\nDescribes a file sourced from a file\nDescribes a file sourced from a string\nAn extension of <code>Format</code> trait.\nUnadorned error from a foreign origin.\nDescribes a format of configuration source data\nConfiguration is frozen and no further mutations can be …\nINI (parsed with rust_ini)\nJSON (parsed with serde_json)\nJSON5 (parsed with json5)\nCustom message\nConfiguration property was not found\nConfiguration path could not be parsed.\nRON (parsed with ron)\nDescribes a generic <em>source</em> of configuration properties.\nTOML (parsed with toml)\nValue could not be converted into the requested type.\nA configuration value.\nUnderlying kind of the configuration value.\nYAML (parsed with yaml_rust)\nCreates new <code>ConfigBuilder</code> instance\nRoot of the cached configuration.\nCollect all configuration properties available from this …\nCollects all configuration properties available from this …\nCollects all configuration properties to a provided cache.\nCollects all configuration properties to a provided cache.\nCollects all configuration properties to a provided cache.\nCollects all configuration properties to a provided cache.\nReturns a vector of file extensions, for instance …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> into an array, if possible\nReturns <code>self</code> as a bool, if possible.\nReturns <code>self</code> into a f64, if possible.\nReturns <code>self</code> into an i64, if possible.\nReturns <code>self</code> into an i128, if possible.\nReturns <code>self</code> into a string, if possible.\nIf the <code>Value</code> is a Table, returns the associated Map.\nReturns <code>self</code> into an u64, if possible.\nReturns <code>self</code> into an u128, if possible.\nUnderlying kind of the configuration value.\nWhen set and try_parsing is true, then all environment …\nMerge in a configuration property source.\nCreate a new value instance that will remember its source …\nParses provided content into configuration values …\nRefresh the configuration cache with fresh data from added …\nSet an overwrite\nSet a default <code>value</code> at <code>key</code>\nAttempt to deserialize the entire configuration into the …\nAttempt to deserialize this value into the requested type.\nAttempt to serialize the entire configuration from the …\nNote: enabling <code>try_parsing</code> can reduce performance it will …\nAdd a key which should be parsed as a list when collecting …\nMerge in a configuration property source.\nGiven the basename of a file, will attempt to locate a …\nThe captured error from attempting to parse the file in …\nWhat was expected when parsing the value\nThe key in the configuration hash of this value (if …\nThe URI that references the source that the value came …\nWhat we found when parsing the value\nThe URI used to access the file (if not loaded from a …\nThe asynchronous configuration builder.\nRepresents data specific to builder in asychronous state, …\nRepresents <code>ConfigBuilder</code> state.\nA configuration builder\nRepresents data specific to builder in default, sychronous …\nRegisters new <code>AsyncSource</code> in this builder and forces …\nRegisters new <code>AsyncSource</code> in this builder.\nRegisters new <code>Source</code> in this builder.\nRegisters new <code>Source</code> in this builder.\nReads all registered <code>Source</code>s.\nReads all registered defaults, <code>Source</code>s, <code>AsyncSource</code>s and …\nReads all registered defaults, <code>Source</code>s, <code>AsyncSource</code>s and …\nReads all registered <code>Source</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet a default <code>value</code> at <code>key</code>\nSet an override\nSets an override if value is Some(_)")