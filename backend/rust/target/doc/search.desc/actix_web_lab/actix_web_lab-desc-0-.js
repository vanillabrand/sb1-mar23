searchState.loadedDescShard("actix_web_lab", 0, "In-progress extractors and middleware for Actix Web.\nDerive a <code>FromRequest</code> implementation for an aggregate …\nQuickly write tests that check various parts of a …\nExperimental body types.\nExperimental extractors.\nExperimental route guards.\nExperimental typed headers.\nExperimental middleware.\nExpiremental responders and response helpers.\nSemantic server-sent events (SSE) responder with a …\nExpiremental testing utilities.\nCreate a <code>TestRequest</code> using a DSL that looks kinda like …\nUtilities for working with Actix Web types.\nExperimental services.\nA channel-like sender for body chunks.\nAn <code>AsyncWrite</code> response body writer.\nReturns a sender half and a receiver half that can be used …\nCloses the stream, optionally sending an error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>BodyStream</code> from an infallible byte chunk …\nConstructs a new <code>SizedStream</code> from an infallible byte chunk …\nSubmits a chunk of bytes to the response body stream.\nReturns an <code>AsyncWrite</code> response body writer and its …\nExtractor wrapper that limits size of payload used.\nBytes extractor with const-generic payload size limit.\nDefault body size limit of 2MiB.\nDefault bytes payload size limit of 4MiB.\nDefault JSON payload size limit of 2MiB.\nDefault URL-encoded form payload size limit of 2MiB.\nError type used by all trait methods to signal missing …\nInner extractor error.\nHost information.\nJSON extractor with const-generic payload size limit.\nA lazy extractor for thread-local data.\nA thread-local equivalent to <code>SharedData</code>.\nExtract typed data from request path segments.\nExtract typed information from the request’s query.\nReconstructed path using x-forwarded-prefix header.\nWraps an extractor and calculates a request signature hash …\nErrors that can occur when extracting and processing …\nDefine a scheme for deriving and verifying some kind of …\nAn alias for <code>actix_web::web::Data&lt;T&gt;</code> with a more …\nSignature calculation error.\nThe signature type returned from <code>finalize</code> and checked in …\nA wrapper around <code>ArcSwap</code> that can be used as an extractor.\nURL-encoded form extractor with const-generic payload size …\nFold received body chunk into signature.\nFinalize and output <code>Signature</code> type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize a <code>T</code> from the URL encoded query parameter …\nReturns reference to result of lazy <code>T</code> value, initializing …\nInitialize signature scheme for incoming request.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns inner extracted type.\nUnwraps into inner <code>Bytes</code>.\nUnwraps into inner string value.\nUnwraps into inner <code>T</code> value.\nUnwrap into inner <code>T</code> value.\nUnwrap into inner <code>T</code> value.\nUnwraps into inner <code>T</code> value.\nReturns tuple containing body type, and owned hash.\nReturns a temporary access guard to the wrapped data item.\nConstructs a new <code>LazyData</code> extractor with the given …\nConstructs a new <code>LocalData</code> instance.\nConstructs new swappable data item.\nReplaces the value inside this instance.\nVerify <em>true signature</em> against <em>candidate signature</em>.\nVerify <em>true signature</em> against <em>candidate signature</em>.\nA guard that verifies that an <code>Accept</code> header is present and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllows <code>*/*</code> in the <code>Accept</code> header to pass the guard check.\nConstructs new <code>Acceptable</code> guard with the given <code>mime</code> …\nThe <code>Cache-Control</code> header, defined in RFC 7234 §5.2.\nDirectives contained in a <code>CacheControl</code> header.\n<code>Content-Length</code> header, defined in RFC 9110 §8.6.\nExtension directive.\n<code>Forwarded</code> header, defined in RFC 7239.\nThe <code>immutable</code> response directive.\nThe <code>max-age=N</code> directive.\nThe <code>max-stale=N</code> request directive.\nThe <code>min-fresh=N</code> request directive.\nThe <code>must-revalidate</code> response directive.\nThe <code>must-understand</code> response directive.\nThe <code>no-cache</code> directive.\nThe <code>no-store</code> directive.\nThe <code>no-transform</code> directive.\nThe <code>only-if-cached</code> request directive.\nThe <code>private</code> response directive.\nThe <code>proxy-revalidate</code> response directive.\nThe <code>public</code> response directive.\nThe <code>s-maxage=N</code> response directive.\nThe <code>stale-if-error</code> directive.\nThe <code>stale-while-revalidate</code> response directive.\nHTTP Strict Transport Security (HSTS) configuration.\nThe <code>X-Forwarded-Prefix</code> header, defined in [RFC XXX §X.X].\nConventional <code>X-Forwarded-Prefix</code> header.\nReturns the “by” identifier, if set.\nReturns iterator over the “for” chain.\nReturns first “for” parameter which is typically the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the “host” identifier, if set.\nSend <code>includeSubdomains</code> directive with header.\nThe <code>includeSubdomains</code> directive.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns Content-Length value.\nConstructs new <code>Forwarded</code> header from parts.\nConstructs a new HSTS configuration using the given …\nConstructs new <code>Forwarded</code> header from a single “for” …\nSend <code>preload</code> directive with header.\nThe <code>preload</code> directive.\nReturns the “proto” identifier, if set.\nAdds an identifier to the “for” chain.\nConstructs a secure, production-ready HSTS configuration.\nA middleware to catch panics in wrapped handlers and …\nMiddleware for registering custom status code based error …\nA middleware that sheds load when the inner service isn’…\nMiddleware transform for <code>map_response_body</code>.\nMiddleware transform for <code>map_response</code>.\nMiddleware transform for <code>from_fn</code>.\nWraps the “next” service in the middleware chain.\nMiddleware for normalizing a request’s path so that …\nA middleware that triggers a callback when the worker is …\nA middleware to redirect traffic to HTTPS if connection is …\nEquivalent to <code>Service::call(self, req)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWraps an async function to be used as a middleware.\nRegister error handler for specified status code.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a middleware from an async function that is used …\nCreates a middleware from an async function that is used …\nConstruct new <code>ErrorHandlers</code> instance.\nCreates a new load-shedding middleware.\nCreate new <code>NormalizePath</code> middleware with the specified …\nConstructs new panic reporter middleware with <code>callback</code>.\nA function middleware to redirect traffic to <code>www.</code> if not …\nSets custom secure redirect port.\nConstructs a new <code>NormalizePath</code> middleware with trim …\nConfigures middleware to respond to requests with …\nConfigures middleware to respond to requests with …\nConstruct new HTTP redirect middleware with strict …\nA buffered CSV serializing body stream.\nA buffered line formatting body stream.\nAn HTML responder.\nA buffered NDJSON serializing body stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a chunked body stream that serializes as CSV …\nCreates a chunked body stream that serializes as CSV …\nCreates a chunked body stream that serializes as NDJSON …\nCreates a stream of serialized chunks.\nCreates a stream of serialized chunks.\nCreates a stream of serialized chunks.\nCreates a <code>Responder</code> type with a serializing stream and …\nCreates a <code>Responder</code> type with a line-by-line serializing …\nCreates a <code>Responder</code> type with a serializing stream and …\nReturns the CSV MIME type (<code>text/csv; charset=utf-8</code>).\nReturns the NDJSON MIME type (<code>application/x-ndjson</code>).\nConstructs a new <code>Csv</code> from a stream of rows.\nConstructs a new <code>DisplayStream</code> from a stream of lines.\nConstructs a new <code>Html</code> responder.\nConstructs a new <code>NdJson</code> from a stream of items.\nConstructs a new <code>Csv</code> from an infallible stream of rows.\nConstructs a new <code>DisplayStream</code> from an infallible stream …\nConstructs a new <code>NdJson</code> from an infallible stream of items.\nStream implementation for channel-based SSE <code>Sender</code>.\nThe receiving (<code>Sse</code>) has been dropped, likely because the …\nA comment message.\nServer-sent events data message containing a <code>data</code> field …\nA <code>data</code> message with optional ID and event name.\nServer-sent events message containing one or more fields.\nThe SSE send buffer is full.\nError returned from <code>SseSender::send()</code>.\nSender half of a server-sent events stream.\nServer-sent events (<code>text/event-stream</code>) responder.\nError returned from <code>SseSender::try_send()</code>.\nCreate server-sent events (SSE) channel pair.\nSets <code>event</code> name field, returning a new data message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an SSE response from a stream that yields SSE Event…\nSets <code>id</code> field, returning a new data message.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new SSE data message with just the <code>data</code> field.\nConstructs a new SSE data message the <code>data</code> field set to …\nSend an SSE message.\nSets <code>data</code> field.\nSets <code>event</code> name field.\nSets <code>id</code> field.\nTries to send SSE message.\nEnables “keep-alive” messages to be send in the event …\nQueues first event message to inform client of custom …\nQuickly write tests that check various parts of a …\nCreates service that always responds with given status …\nCreate a <code>TestRequest</code> using a DSL that looks kinda like …\nConverts stream with item <code>T</code> into <code>Result&lt;T, Infallible&gt;</code>.\nReturns an effectively cloned payload that supports …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs new <code>InfallibleStream</code> stream.\nAn HTTP service for redirecting one path to another path …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Redirect</code> service, first providing the path …\nUse the “308 Permanent Redirect” status when …\nCreate a relative or absolute redirect.\nUse the “307 Temporary Redirect” status when …\nShortcut for creating a redirect to use as a <code>Responder</code>.\nAllows the use of custom status codes for less common …")